<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Robert Eshleman]]></title>
  <link href="http://blog.roberteshleman.com/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.roberteshleman.com/"/>
  <updated>2014-10-17T16:02:06-04:00</updated>
  <id>http://blog.roberteshleman.com/</id>
  <author>
    <name><![CDATA[Robert Eshleman]]></name>
    <email><![CDATA[hello@roberteshleman.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Readable RSpec Tests With Helper Methods]]></title>
    <link href="http://blog.roberteshleman.com/2014/10/17/readable-rspec-tests-with-helper-methods/"/>
    <updated>2014-10-17T15:55:34-04:00</updated>
    <id>http://blog.roberteshleman.com/2014/10/17/readable-rspec-tests-with-helper-methods</id>
    <content type="html"><![CDATA[<p><em>I&rsquo;m a recent graduate of <a href="http://www.thisismetis.com">Metis</a>, a 12-week Ruby on Rails course taught by some great folks from <a href="http://www.thoughtbot.com">thoughtbot</a>. This post is part of a series sharing my experience and some of the things I&rsquo;ve learned.</em></p>

<p>I&rsquo;ve been spending a lot of time recently becoming familiar with <a href="http://rspec.info">Rspec</a>, <a href="http://jnicklas.github.io/capybara/">Capybara</a>, and <a href="http://en.wikipedia.org/wiki/Test-driven_development">TDD</a>. Because tests frequently have similar or repeated steps, this has also been a great opportunity to practice <a href="http://c2.com/cgi/wiki?DontRepeatYourself">DRY</a>-ing up my code.</p>

<p>One particularly effective technique I&rsquo;ve been using often in my tests is extracting helper methods with descriptive names to make my code easier to read.</p>

<!--More-->


<h2>Setup and Exercise</h2>

<p>In the setup and exercise <a href="http://robots.thoughtbot.com/four-phase-test">phase</a>s, code across tests may be very similar and ripe for extraction into a method. For example, here&rsquo;s a helper method in one of my feature specs for a user signing in:</p>

<p><code>ruby
def visit_sign_in_page
  visit root_path
  click_link "Sign in"
end
</code></p>

<p>And another simple one that takes some parameters:</p>

<p><code>ruby
def user_signs_in_as(email, password)
  fill_in "Email", with: email
  fill_in "Password", with: password
  click_button "Sign in"
end
</code></p>

<h2>Verify</h2>

<p>I&rsquo;ve found that the verification <a href="http://robots.thoughtbot.com/four-phase-test">phase</a> of my tests tend to see the most readability benefit from extracting methods.</p>

<p>For example, this was some code that I used in a test verification recently:</p>

<p><code>ruby
expect(page).to have_css(".event", text: event.name)
</code></p>

<p>This isn&rsquo;t too bad, but it becomes clearer when extracted into a helper method:</p>

<p><code>ruby
def have_event_summary(event)
  have_css(".event", text: event.name)
end
</code></p>

<p>The intent of this verification is obvious when I now write <code>expect(page).to have_event_summary(event)</code> or <code>expect(page).not_to have_event_summary(event)</code>.</p>

<p>For more complex verifications, the expectation can also be included in the helper method, like so:</p>

<p>```ruby
def expect_page_to_have_user_review_summary_for(event)
  within(&ldquo;.review-score&rdquo;, text: &ldquo;Users&rdquo;) do</p>

<pre><code>expect(page).to have_text(event.average_user_review_score)
expect(page).to have_text("#{event.num_user_reviews} Reviews")
</code></pre>

<p>  end
end
```</p>

<p>The verification phase for most of my tests using this method simply reads <code>expct_page_to_have_user_review_summary_for(event)</code>. This is much nicer than multiple <code>have_css</code> or <code>have_text</code> expectations.</p>

<p>As an additional bonus, RSpec will even provide clear failure messages if these assertions fail:</p>

<p><code>
Failure/Error: expect_page_to_have_user_review_summary_for(event)
expected to find text "9.0" in "No Review Here"
</code></p>

<h2>Reuse Across Files</h2>

<p>Finally, RSpec allows these methods to be easily reused across spec files, if we so desire.</p>

<p>All we have to do is wrap them up in a module like <code>EventSummaryHelpers</code> in <code>spec/support/</code>. Then, in <code>spec/rails_helper.rb</code>, simply tell RSpec to load that module:</p>

<p><code>ruby
RSpec.configure do |config|
  config.include EventSummaryHelpers, type: :feature
end
</code></p>

<p>In this case, to save overhead, RSpec will only load these helpers when running feature specs.</p>

<h2>Resources</h2>

<ul>
<li><a href="http://testdrivenwebsites.com/2011/08/17/different-ways-of-code-reuse-in-rspec/">Code Reuse in RSpec</a></li>
<li><a href="http://robots.thoughtbot.com/four-phase-test">Four-Phase Tests</a></li>
<li><a href="http://betterspecs.org">Writing Better Tests</a></li>
<li><a href="http://rspec.info">RSpec</a></li>
<li><a href="http://jnicklas.github.io/capybara/">Capybara</a></li>
<li><a href="http://en.wikipedia.org/wiki/Test-driven_development">TDD</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Postgres Views With Rails]]></title>
    <link href="http://blog.roberteshleman.com/2014/09/17/using-postgres-views-with-rails/"/>
    <updated>2014-09-17T22:17:00-04:00</updated>
    <id>http://blog.roberteshleman.com/2014/09/17/using-postgres-views-with-rails</id>
    <content type="html"><![CDATA[<p><em>I&rsquo;m a recent graduate of <a href="http://www.thisismetis.com">Metis</a>, a 12-week Ruby on Rails course taught by some great folks from <a href="http://www.thoughtbot.com">thoughtbot</a>. This post is part of a series sharing my experience and some of the things I&rsquo;ve learned.</em></p>

<p>Most relational databases support the concept of a <a href="http://en.wikipedia.org/wiki/View_%28SQL%29">view</a>, a pre-defined relation that&rsquo;s essentially a stored query. You can query a view just like any other database table, but the fields and values in a view are defined based on the query used to create the view.</p>

<p>Views can be used for a number of reasons, most of them related to abstraction. For example, a view could be defined to allow easier querying of a complex join or to filter a relation to include only a subset of data.</p>

<p>In this post, we&rsquo;ll take a look at using a Postgres view with Rails to encapsulate data in a repeated aggregate query.</p>

<!-- More -->


<h2>The Project and the Problem</h2>

<p>As my capstone project for <a href="http://www.thisismetis.com">Metis</a>, I created <a href="http://bdwycritic.com">BdwyCritic</a> (<a href="https://github.com/reshleman/bdwycritic">source on GitHub</a>), a review aggregator for Broadway shows, similar to <a href="http://www.metacritic.com">Metacritic</a>. Every show (I called them &ldquo;events&rdquo;) has many user reviews and many media (or critic) reviews.</p>

<p>When building the site, I found that I was frequently displaying the average user and media review score for events. In my original implementation, I used a class method to gather these statistics:</p>

<p>```ruby</p>

<h1>app/models/event.rb</h1>

<p>class Event &lt; ActiveRecord::Base
  has_many :user_reviews, dependent: :destroy
  has_many :media_reviews, dependent: :destroy</p>

<p>  def self.with_review_statistics</p>

<pre><code>select("events.*").
select("AVG(media_reviews.score) AS average_media_review").
select("AVG(user_reviews.score) AS average_user_review").
joins("LEFT JOIN media_reviews ON events.id = media_reviews.event_id").
joins("LEFT JOIN user_reviews ON events.id = user_reviews.event_id").
group("events.id")
</code></pre>

<p>  end
end
```</p>

<p>There were at least two pain points I encountered with this code.</p>

<ol>
<li>That&rsquo;s a lot of ugly SQL to have in the model, and it made it difficult to read and understand the method.</li>
<li>Every <code>Event</code> logically has the concept of an &ldquo;average user review&rdquo; or an &ldquo;average media review.&rdquo; With this implementation, those values were only available for a given <code>Event</code> if I had explicitly queried the model using this class method.</li>
</ol>


<p>Both of these <a href="http://en.wikipedia.org/wiki/Code_smell">code smells</a> prompted me to explore alternative implementations.</p>

<h2>Choosing a Database View as the Solution</h2>

<p>I considered a couple of solutions before settling on using a database view:</p>

<ol>
<li><p>Change this class method into the <strong><a href="http://guides.rubyonrails.org/active_record_querying.html#applying-a-default-scope">default scope</a></strong> for the <code>Event</code> model. That would resolve the second issue above, because every instance of <code>Event</code> would be automatically scoped with fields representing the average review values. The difficult-to-read SQL code would still remain in the model, however, and default scopes can sometimes lead to other unexpected complications with queries.</p></li>
<li><p><strong>De-normalize the database</strong> and keep a cache of the average review scores for each event. This would potentially come with a performance increase for database reads (which, in this application, are more frequent than writes). It would also likely involve using <a href="http://guides.rubyonrails.org/active_record_callbacks.html">ActiveRecord callbacks</a> to manually maintain the cached values, something I prefer to avoid when at all possible.</p></li>
<li><p>A <strong>database view</strong> solves both of the challenges of my previous implementation. It removes the SQL statements from the model and allows every <code>Event</code> to have methods for average user and media reviews. (I achieved the latter through <a href="http://en.wikipedia.org/wiki/Delegation_pattern">delegation</a>, as we&rsquo;ll see.)</p></li>
</ol>


<p>(There <em>is</em> one caveat to call out here: because ActiveRecord doesn&rsquo;t natively support views, using a view removes the flexibility that ActiveRecord provides to interface with different database backends. There could be a cost later if we want to switch over to, say, MySQL. Given what I know about this project and the production environment, that&rsquo;s a trade-off I&rsquo;m currently comfortable making.)</p>

<h2>Creating the Database View</h2>

<p>Like any other database change in Rails, creating the view involves a migration.</p>

<p>Because the ActiveRecord <a href="http://en.wikipedia.org/wiki/Domain-specific_language">DSL</a> doesn&rsquo;t provide methods for creating views, we actually have to <a href="http://www.postgresql.org/docs/9.3/static/sql-createview.html">write the SQL ourselves</a>, but it&rsquo;s not too complicated. The <code>SELECT</code> is basically a translation of our earlier class method into raw SQL.</p>

<p>```ruby</p>

<h1>db/migrate/TIMESTAMP_create_review_statistics_summary_view.rb</h1>

<p>class CreateReviewStatisticsSummaryView &lt; ActiveRecord::Migration
  def up</p>

<pre><code>execute &lt;&lt;-SQL
  CREATE VIEW review_statistics_summary AS
    SELECT
      events.id as event_id,
      AVG(user_reviews.score) AS average_user_review,
      AVG(media_reviews.score) AS average_media_review
    FROM
      events
      LEFT JOIN user_reviews ON events.id = user_reviews.event_id
      LEFT JOIN media_reviews ON events.id = media_reviews.event_id
    GROUP BY
      events.id
SQL
</code></pre>

<p>  end</p>

<p>  def down</p>

<pre><code>execute "DROP VIEW review_statistics_summary"
</code></pre>

<p>  end
end
```</p>

<p>Then, just run <code>rake db:migrate</code>.</p>

<h2>Setting up the Models</h2>

<h3>Defining a Model for the Database View</h3>

<p>Despite ActiveRecord&rsquo;s lack of support for views, it does treat the view as any other relation, so we can easily hook it up to a model.</p>

<p>```ruby</p>

<h1>app/models/review_statistics_summary.rb</h1>

<p>class ReviewStatisticsSummary &lt; ActiveRecord::Base
  self.primary_key = &ldquo;event_id&rdquo;</p>

<p>  belongs_to :event
end
```</p>

<p>This view doesn&rsquo;t have it&rsquo;s own <code>id</code> column because <code>event_id</code> is the value that uniquely identifies records in the relation. ActiveRecord expects the primary key column to be called <code>id</code>, though, so we explicitly define the primary key column in the model.</p>

<p><em>Technically</em>, because this model will only be used in relation to an <code>Event</code> object, we don&rsquo;t even need to specify the primary key. I&rsquo;m inclined to include it here anyway, since there&rsquo;s a chance we might run into unexpected ActiveRecord errors in the future without it (if we try to call <code>ReviewStatisticsSummmary.find</code>, for example).</p>

<h3>Updating the Event Model</h3>

<p>The second step is to relate the <code>Event</code> model to the <code>ReviewStatisticsSummary</code> model. This one is easy:</p>

<p>```ruby</p>

<h1>app/models/event.rb</h1>

<p>has_one :review_statistics_summary
```</p>

<h3>Delegating the Average Methods</h3>

<p>Finally, we&rsquo;d like to avoid chained method calls (like <code>event.review_statistics_summary.average_user_review</code>), which are difficult to read and violate the <a href="http://c2.com/cgi/wiki?LawOfDemeter">Law of Demeter</a>.</p>

<p>The simple solution here is to <a href="http://guides.rubyonrails.org/active_support_core_extensions.html#method-delegation">delegate</a> the <code>average_user_review</code> and <code>average_media_review</code> methods to the <code>ReviewStatisticsSummary</code> class:</p>

<p>```ruby</p>

<h1>app/models/event.rb</h1>

<p>delegate :average_user_review, :average_media_review, to: :review_statistics_summary
```</p>

<p>Now we can call <code>event.average_user_review</code> or <code>event.average_media_review</code> as expected, and those method calls are <em>delegated</em> to that event&rsquo;s instance of <code>ReviewStatisticsSummary</code>.</p>

<p>This syntax is a <a href="http://guides.rubyonrails.org/active_support_core_extensions.html#method-delegation">Rails shorthand</a> equivalent to defining these two methods on <code>Event</code>:</p>

<p>```ruby</p>

<h1>app/models/event.rb</h1>

<p>def average_user_review
  review_statistics_summary.average_user_review
end</p>

<p>def average_media_review
  review_statistics_summary.average_media_review
end
```</p>

<p>We can also delete the entire <code>self.with_review_statistics</code> class method from earlier. Hooray!</p>

<h2>Postgres Views and the Rails Database Schema</h2>

<p>One final caveat to note here: because of the way we&rsquo;ve defined the view with raw SQL, ActiveRecord has no way of adding that information to Rails&rsquo;s <code>db/schema.rb</code> file.</p>

<p>However, if you&rsquo;re deploying an app, you often don&rsquo;t want to run all of the migrations to set up the database. Instead, <a href="http://guides.rubyonrails.org/migrations.html#schema-dumping-and-you">the preferred way to deploy the database</a> is to just load the schema itself. Since the schema doesn&rsquo;t contain a definition for the view we&rsquo;ve just created, we&rsquo;ll run into problems.</p>

<p>This is of particular concern when using RSpec with Rails 4.1+, because RSpec loads the test environment database from the schema file by default. Since we&rsquo;ve manually created the view and it&rsquo;s not in <code>db/schema.rb</code>, Postgres will complain that the view does not exist when running the tests.</p>

<p>The workaround is to tell Rails to use raw SQL for its schema in a file called <code>db/structure.sql</code>. This file replaces <code>db/schema.rb</code> and dumps the structure directly from the database instead of using the ActiveRecord <a href="http://en.wikipedia.org/wiki/Domain-specific_language">DSL</a>. The <a href="http://guides.rubyonrails.org/migrations.html#types-of-schema-dumps">Rails Guide on Migrations</a> provides detailed instructions for making that change. It&rsquo;s pretty painless.</p>

<h2>Resources</h2>

<ul>
<li><a href="http://en.wikipedia.org/wiki/View_%28SQL%29">Overview of Database Views</a></li>
<li><a href="http://www.postgresql.org/docs/9.3/static/sql-createview.html">Postgres Documentation for Views</a></li>
<li><a href="http://guides.rubyonrails.org/migrations.html#schema-dumping-and-you">Rails Schema Formats</a></li>
<li><a href="http://en.wikipedia.org/wiki/Delegation_pattern">Delegation Pattern</a></li>
<li><a href="http://guides.rubyonrails.org/active_support_core_extensions.html#method-delegation">Method Delegation in Rails</a></li>
<li><a href="http://c2.com/cgi/wiki?LawOfDemeter">Law of Demeter</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Private Class Methods in Ruby]]></title>
    <link href="http://blog.roberteshleman.com/2014/08/22/private-class-methods-in-ruby/"/>
    <updated>2014-08-22T11:17:04-04:00</updated>
    <id>http://blog.roberteshleman.com/2014/08/22/private-class-methods-in-ruby</id>
    <content type="html"><![CDATA[<p><em>This summer, I&rsquo;m learning Ruby on Rails at <a href="http://www.thisismetis.com">Metis</a>, a 12-week class taught by some great folks from <a href="http://www.thoughtbot.com">thoughtbot</a>. This post is part of a series sharing my experience and some of the things I&rsquo;m learning.</em></p>

<p>File this one under, &ldquo;fool me once, shame on you; fool me twice, write a blog post.&rdquo;</p>

<p>In Ruby we use the <a href="http://www.ruby-doc.org/core-2.1.2/Module.html#method-i-private"><code>private</code> method</a> to define instance methods that are only accessible from within a class:</p>

<!-- More -->


<p>```ruby
class HammerTime
  # Arbitrary public methods omitted</p>

<p>  private</p>

<p>  def stop</p>

<pre><code>puts "Can't touch this"
</code></pre>

<p>  end
end
```</p>

<p>Calling <code>stop</code> on an instance of the class <code>HammerTime</code> from somewhere other than within the class itself will result in an error:</p>

<p>```ruby
HammerTime.new.stop</p>

<h1>=> NoMethodError: private method `stop' called for #&lt;HammerTime:0x00></h1>

<p>```</p>

<p>Given this, we might expect the same syntax to work for <em>class methods</em>:</p>

<p>```ruby
class I
  # Arbitrary public methods omitted</p>

<p>  private</p>

<p>  def self.wanna</p>

<pre><code>puts "...dance with somebody"
puts "...feel the heat with somebody"
</code></pre>

<p>  end
end
```</p>

<p>Surely we&rsquo;ll get the same <code>NoMethodError</code>, right? Wrong:</p>

<p>```ruby
I.wanna</p>

<h1>=> &hellip;dance with somebody</h1>

<h1>=> &hellip;feel the heat with somebody</h1>

<p>```</p>

<p>Instead, we&rsquo;ll need to explicitly define this method as a <a href="http://www.ruby-doc.org/core-2.1.2/Module.html#method-i-private_class_method"><code>private_class_method</code></a>, like this:</p>

<p>```ruby
class Domo
  # Arbitrary public methods omitted</p>

<p>  def self.arigato</p>

<pre><code>puts "Secret secret, I've got a secret"
</code></pre>

<p>  end
  private_class_method :arigato
end
```</p>

<p>And we&rsquo;ll get the expected error, indicating this method is only accessible from within the class:</p>

<p>```ruby
Domo.arigato</p>

<h1>=> NoMethodError: private method `arigato' called for Domo:Class</h1>

<p>```</p>

<p><em>Caveat emptor.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Rails Namespaces for Admin Actions]]></title>
    <link href="http://blog.roberteshleman.com/2014/08/14/using-rails-namespaces-for-admin-actions/"/>
    <updated>2014-08-14T17:17:56-04:00</updated>
    <id>http://blog.roberteshleman.com/2014/08/14/using-rails-namespaces-for-admin-actions</id>
    <content type="html"><![CDATA[<p><em>This summer, I&rsquo;m learning Ruby on Rails at <a href="http://www.thisismetis.com">Metis</a>, a 12-week class taught by some great folks from <a href="http://www.thoughtbot.com">thoughtbot</a>. This post is part of a series sharing my experience and some of the things I&rsquo;m learning.</em></p>

<p>Rails has several strategies to help us separate concerns in our applications. We use separate files and directories for models, views and controllers, for example, and we can nest routes based on how the resources are related to each other.</p>

<p>In addition, Rails permits the use of <a href="http://en.wikipedia.org/wiki/Namespace">namespaces</a> to organize our resources and prevent naming conflicts. In this post, we&rsquo;ll take a look at why this feature is useful by implementing a namespace for admin actions in a sample <a href="http://craigslist.org">Craigslist</a> clone Rails app.</p>

<!--More-->


<h2>Routing</h2>

<p>In our version of Craigslist, our app has many categories (i.e., &ldquo;bikes,&rdquo; &ldquo;boats,&rdquo; &ldquo;missed connections,&rdquo; etc.), each with many posts. To start out, our routes look something like this:</p>

<p><code>ruby
resources :categories, only: [:index, :show] do
  resources :posts, only: [:new, :create, :show]
end
</code></p>

<p>We want to give admin users the ability to add categories, so we add the following to our <code>routes.rb</code>:</p>

<p><code>ruby
namespace :admin do
  resources :categories, only: [:new, :create]
end
</code></p>

<p>This gives us routes under the path <code>/admin/categories</code> which are directed to <code>Admin::CategoriesController</code>.</p>

<h2>The Controller</h2>

<p>There are a few considerations we have for our namespaced controller.</p>

<p>First, Rails expects this controller file to exist in an <code>admin/</code> folder within <code>app/controllers/</code> (i.e., at <code>app/controllers/admin/categories_controller.rb</code>).</p>

<p>Second, because the controller is named within the <code>admin</code> namespace, we use the <a href="http://en.wikipedia.org/wiki/Scope_resolution_operator">scope resolution operator</a> to define the controller class:</p>

<p><code>ruby
class Admin::CategoriesController &lt; ApplicationController
  # Methods omitted
end
</code></p>

<p>From there, we can define our <code>new</code> and <code>create</code> actions as we normally would.</p>

<p>Note, also, that we still have our non-namespaced <code>categories</code> routes (for <code>show</code> and <code>index</code>) that direct requests to the standard <code>CategoriesController</code> in <code>app/controllers/</code>.</p>

<h2>Views</h2>

<p>Views that correspond to our <code>Admin::CategoriesController</code> actions are namespaced just like the controller is. When Rails needs these view files, it will look in the <code>app/views/admin/</code> subfolder.</p>

<p>Additionally, we&rsquo;ll need to point our path helpers to the right place for namespaced routes. For example, we&rsquo;ll use paths like <code>new_admin_category_path</code> and <code>form_for [:admin, @category]</code> in our views.</p>

<h2>Restricting Access to Admin Actions</h2>

<p>So far, we have our admin actions working within the namespace, but we&rsquo;re not actually restricting access to these actions.</p>

<p>There are a couple of approaches here. We&rsquo;ll start by adding a simple <code>before_action</code> to the <code>Admin::CategoriesController</code>:</p>

<p>```ruby
class Admin::CategoriesController &lt; ApplicationController
  before_action :require_admin</p>

<p>  # Methods omitted</p>

<p>  def require_admin</p>

<pre><code>unless current_user.admin?
  redirect_to root_path
end
</code></pre>

<p>  end
end
```</p>

<p>We have a <code>current_user</code> method already defined by our authentication system. (I&rsquo;ve been quite happy using <a href="https://github.com/halogenandtoast/monban">Monban</a> recently.) Additionally, our <code>User</code> model has a boolean <code>admin</code> field, so we can simply redirect if the user isn&rsquo;t an admin.</p>

<h2>Refactoring</h2>

<p>This approach works, but it&rsquo;s not very flexible. If we add other admin actions (say, for filtering posts flagged as spam), we have to redefine this <code>require_admin</code> method in each namespaced controller.</p>

<p>One solution might be to define the <code>require_admin</code> method in our <code>ApplicationController</code>. That&rsquo;s a step in the right direction, but we would have to remember to add the <code>before_action</code> to each admin controller; these controllers wouldn&rsquo;t be secure by default.</p>

<p>The solution I prefer is to define a separate class (in <code>app/controllers/</code>) called <code>AdminController</code> that inherits from <code>ApplicationController</code>:</p>

<p>```ruby
class AdminController &lt; ApplicationController
  before_action :require_admin</p>

<p>  def require_admin</p>

<pre><code>unless current_user.admin?
  redirect_to root_path
end
</code></pre>

<p>  end
end
```</p>

<p>Now, each namespaced admin controller can inherit directly (and quite appropriately) from <code>AdminController</code>. Since we&rsquo;ve defined the <code>before_action</code> in <code>AdminController</code>, actions in any sub-classed controller will be restricted to admin users by default.</p>

<p>We no longer need to list the <code>before_action</code> or define a <code>require_admin</code> method in each of our namespaced controllers; they just inherit from <code>AdminController</code>:</p>

<p><code>ruby
class Admin::CategoriesController &lt; AdminController
  # Methods omitted
end
</code></p>

<p>Simple, effective, and scalable. By extracting the <code>before_action</code> and <code>require_admin</code> logic into a separate parent controller, we&rsquo;ve made it startlingly easy to add new admin actions in the future.</p>

<p>We&rsquo;ll thank ourselves later.</p>

<h2>Resources</h2>

<ul>
<li><a href="http://guides.rubyonrails.org/routing.html#controller-namespaces-and-routing">Rails Guide on Routing</a></li>
<li><a href="https://github.com/halogenandtoast/monban">Monban User Authentication</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning to Work Efficiently With Vim]]></title>
    <link href="http://blog.roberteshleman.com/2014/07/18/learning-to-work-efficiently-with-vim/"/>
    <updated>2014-07-18T14:31:09-04:00</updated>
    <id>http://blog.roberteshleman.com/2014/07/18/learning-to-work-efficiently-with-vim</id>
    <content type="html"><![CDATA[<p><em>This summer, I&rsquo;m learning Ruby on Rails at <a href="http://www.thisismetis.com">Metis</a>, a 12-week class taught by some great folks from <a href="http://www.thoughtbot.com">thoughtbot</a>. This post is part of a series sharing my experience and some of the things I&rsquo;m learning.</em></p>

<p>Until a few months ago, <a href="http://en.wikipedia.org/wiki/Vim_%28text_editor%29">Vim</a> was a program I had never considered using. I had always perceived Vim to be an editor with a steep learning curve that wasn’t worth my time as a web programmer. It was a tool, I thought, used mostly by people who spent their time writing obscure shell scripts or coding the Linux kernel in C.</p>

<p>As it turns out, I was wrong, and I’m glad I was.</p>

<!-- More -->


<h2>Overcoming the Learning Curve</h2>

<p>Now, that’s not to say that Vim’s learning curve isn’t steep — the program can be notoriously unforgiving to a new user. But once I learned a few basic commands to move around, and understood the <a href="http://vimdoc.sourceforge.net/htmldoc/intro.html#vim-modes-intro">different modes</a>, Vim became much easier to work with.</p>

<p>Encouraged by one of my instructors at Metis, I spent up to an hour at the beginning of each day practicing with <a href="http://linuxcommand.org/man_pages/vimtutor1.html">vimtutor</a>. (There are also a number of <a href="http://vim-adventures.com/">web-based</a> <a href="http://www.openvim.com/tutorial.html">tutorials</a>, and this <a href="http://www.viemu.com/vi-vim-cheat-sheet.gif">keyboard layout cheat-sheet</a>.)</p>

<p>After using vimtutor each morning, I then challenged myself to code in Vim throughout the day. At first, I worked much more slowly as I learned different commands and occasionally googled for help. After a few days, though, I could tell that I was beginning to get the hang of it. It was amazing to see the impact of using they keyboard to navigate, without switching over to the mouse every few minutes.</p>

<h2>Hard Work’s Rewards</h2>

<p>Having now spent a few months using Vim, I’m really beginning to appreciate its power. Using <a href="https://code.google.com/p/macvim/">MacVim</a> and a few extensions (for syntax highlighting, file-switching, <em>et al.</em>), I now have most of the key features of a text editor like <a href="http://www.sublimetext.com/">Sublime</a> and still have the additional power of Vim. Overall, my workflow is much more efficient.</p>

<p>Needless to say, Vim has quickly become an indispensable tool, even (especially?) for a web developer like me.</p>

<h2>A Not-Nearly-Exhaustive List of Vim Magic</h2>

<p>Below are just a few of the Vim shortcuts that I’ve found especially useful as I’ve been learning Rails.</p>

<h3>Vanilla Vim Shortcuts</h3>

<ul>
<li><code>c</code> is for “change”; it deletes in the given direction then enters insert mode (i.e., <code>cw</code> to change to the end of the word, or <code>c$</code> to change to the end of the line)</li>
<li><code>d</code> deletes in the given direction (i.e., <code>dw</code> to delete to the end of the word); <code>D</code> deletes to the end of the line</li>
<li><code>o</code> places you in insert mode in a new line below the current line; <code>O</code> does the same above the current line</li>
<li><code>:!</code> lets you run a terminal command from within Vim, helpful for running Ruby files (like <code>:!rb filename.rb</code>)</li>
<li><code>=</code> automatically indents lines in the given direction. <code>gg=G</code> automatically indents the whole file.</li>
</ul>


<h3>Multi-Window Commnds</h3>

<ul>
<li><code>:split</code> for a horizontal window split (optionally append a filename to open)</li>
<li><code>:vsplit</code> for a vertical window split (optionally append a filename to open)</li>
<li><code>Ctl-W</code> commands allow moving between split windows</li>
<li><code>Ctl-W Ctl-W</code> switches between active split windows</li>
<li><code>Ctl-W [h,j,k,l]</code> moves to the split window in the given direction</li>
</ul>


<h3>Vim Rails Magic</h3>

<p><em>This magic comes courtesy of the <code>rails.vim</code> extension, available <a href="https://github.com/tpope/vim-rails">here</a>.</em></p>

<ul>
<li><code>:Rinitializer</code> jumps to the routes file</li>
<li><code>:Rmigration</code> jumps to the most recent migration file</li>
<li><code>:R</code> from inside a view jumps you to the corresponding action within the appropriate controller and vice-versa</li>
<li><code>:Rcontroller wombats</code> jumps to the “wombats” controller</li>
<li><code>:Rview wombats/index.html.erb</code> does the same for the view</li>
<li><code>:Rmodel wombat</code> does the same for the model</li>
<li>Append <code>!</code> to any of the last three to create the file with a boilerplate class definition</li>
</ul>


<h3>File Switching</h3>

<ul>
<li><code>:e</code> followed by a path/filename switches to a different file</li>
<li><code>Ctl-p</code> (via this <a href="https://github.com/kien/ctrlp.vim">extension</a>) has been a <strong>huge</strong> time-saver with its fuzzy filename matching.</li>
</ul>


<h3>Others?</h3>

<p>This is just a short list. Feel fee to tweet me your other favorites <a href="https://twitter.com/RobertEshleman">@RobertEshleman</a> or comment below. =)</p>
]]></content>
  </entry>
  
</feed>
